package presentation;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.SQLException;
import java.util.List;
import dao.PlatDAO;
import dao.PlatscommandeDAO;
import metier.Plat;
import metier.Platscommande;

public class ClientSu extends JFrame {
    private int id;
    private JTable tablePlats;

    public ClientSu(int id) {
        this.id = id;
        setTitle("Plats Sucré");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Sélection");
        model.addColumn("Id");
        model.addColumn("Nom");
        model.addColumn("Prix");
        model.addColumn("Quantité");
        JSpinner jquantite = new JSpinner();
      	jquantite.setBounds(176, 78, 96, 25);
      	

        try {
            PlatDAO pdao = new PlatDAO();
            List<Plat> platsucré = pdao.getPlatSucré();
            for (Plat plat : platsucré) {
                model.addRow(new Object[]{false,plat.getIdPlat(), plat.getNomPlat(), plat.getPrix(), 0}); // Ajoutez une case à cocher pour chaque plat
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erreur lors de la récupération des plats : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }

        // Créez la table avec le modèle
        tablePlats = new JTable(model);
        tablePlats.setPreferredScrollableViewportSize(new Dimension(500, 300));
        tablePlats.setFillsViewportHeight(true);

        // Ajoutez la table à un JScrollPane
        JScrollPane scrollPane = new JScrollPane(tablePlats);
        getContentPane().add(scrollPane);

        // Ajoutez un ItemListener pour gérer les changements de sélection
        tablePlats.getColumnModel().getColumn(0).setCellRenderer(new CheckBoxRenderer());
        tablePlats.getColumnModel().getColumn(0).setCellEditor(new CheckBoxEditor());
        tablePlats.getColumnModel().getColumn(0).setPreferredWidth(80);

        // Modifiez l'éditeur de la colonne "Quantité" pour permettre à l'utilisateur d'entrer la quantité
        tablePlats.getColumnModel().getColumn(4).setCellEditor(new QuantityEditor());

        //button ajouter 
        JPanel contentPane = new JPanel(new BorderLayout());
        contentPane.add(scrollPane, BorderLayout.CENTER);

        JButton btnAjouter = new JButton("Ajouter");
        JButton btnRetour = new JButton("Retour");
        btnRetour.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	Menu choix=new Menu(id);
        		choix.setVisible(true);
        		dispose();
            }});
      
        
        btnAjouter.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    PlatscommandeDAO pdao = new PlatscommandeDAO();
                    for (int row = 0; row < tablePlats.getRowCount(); row++) {
                        boolean isSelected = (boolean) tablePlats.getValueAt(row, 0);
                        if (isSelected) {
                        	   int idPlat = (int) tablePlats.getValueAt(row, 1);
                               String nom=(String) tablePlats.getValueAt(row,2);
                               String quantiteS = (String) tablePlats.getValueAt(row,4);
                               int quantite=Integer.parseInt(quantiteS);
                               Platscommande plat = new Platscommande(idPlat,nom,quantite, id);
                               pdao.ajouterPlatsCommande(plat);
                        }
                    }
                    JOptionPane.showMessageDialog(ClientSu.this, "Plats ajoutés avec succès.", "Succès", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(ClientSu.this, "Erreur lors de l'ajout des plats : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        JPanel boutonPanel = new JPanel(new FlowLayout());
        boutonPanel.add(btnAjouter);
        boutonPanel.add(btnRetour);

        setContentPane(contentPane);
        contentPane.add(boutonPanel, BorderLayout.SOUTH);
    }

    class CheckBoxRenderer extends JCheckBox implements TableCellRenderer {
        public CheckBoxRenderer() {
            setHorizontalAlignment(JLabel.CENTER);
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setSelected((value != null && (boolean) value));
            return this;
        }
    }

    class CheckBoxEditor extends DefaultCellEditor {
        public CheckBoxEditor() {
            super(new JCheckBox());
            JCheckBox checkBox = (JCheckBox) getComponent();
            checkBox.setHorizontalAlignment(JLabel.CENTER);
            checkBox.addItemListener(new ItemListener() {
                public void itemStateChanged(ItemEvent e) {
                    fireEditingStopped();
                }
            });
        }

        public Object getCellEditorValue() {
            return ((JCheckBox) getComponent()).isSelected();
        }
    }

    // Éditeur personnalisé pour la colonne "Quantité"
    class QuantityEditor extends DefaultCellEditor {
        private JTextField textField;

        public QuantityEditor() {
            super(new JTextField());
            textField = (JTextField) getComponent();
            textField.setHorizontalAlignment(JTextField.CENTER);
        }

        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            if (value != null) {
                textField.setText(value.toString());
            }
            return textField;
        }

        public Object getCellEditorValue() {
            return textField.getText();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            int id = 0;
            ClientSu clientSu = new ClientSu(id);
            clientSu.setVisible(true);
        });
    }
}


